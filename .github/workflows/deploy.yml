# This is a basic workflow to help you get started with Actions

name: Deploy Module

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@7a0da25f33985767f15f93140306528900744195
        with:
          path: .\
          recurse: true
      - name: Install Required Modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module NameIT -ErrorAction Stop
      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }
      - name: Build and publish
        env:
          NUGET_KEY: ${{ secrets.PSG_TOKEN }}
        shell: pwsh
        run: |
          Publish-Module -Name .\psrod.psd1 -NuGetApiKey $env:NUGET_KEY
      - name: RabbitMQ Message Sender
        # You may pin to the exact commit or the version.
        # uses: eferraris/rabbit-sender@65a0f69668c2b9d34b442d1b9374983c815e2c01
        uses: eferraris/rabbit-sender@v1.4
        with:
          RABBIT_USERNAME: ${{ secrets.RABBIT_USERNAME }}
          RABBIT_PASSWORD: ${{ secrets.RABBIT_PASSWORD }}
          RABBIT_HOST: ${{ secrets.RABBIT_HOST }}
          RABBIT_PORT: ${{ secrets.RABBIT_PORT }}
          RABBIT_QUEUE_NAME: ${{ secrets.RABBIT_QUEUE_NAME }}
          RABBIT_EXCHANGE_NAME: ${{ secrets.RABBIT_EXCHANGE_NAME }}
          ROUTING_KEY: ${{ secrets.ROUTING_KEY }}
          MESSAGE: ${{ secrets.RABBIT_MESSAGE }}
          RABBIT_USE_SSL: false

 