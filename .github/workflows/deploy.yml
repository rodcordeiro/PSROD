# This is a basic workflow to help you get started with Actions

name: Deploy Module

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@7a0da25f33985767f15f93140306528900744195
        with:
          path: .\
          recurse: true
      - name: Install Required Modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module NameIT -ErrorAction Stop
          Install-Module CredentialManager -ErrorAction Stop
          Install-Module PSRabbitMQ -ErrorAction Stop
      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }
      - name: Build and publish
        env:
          NUGET_KEY: ${{ secrets.PSG_TOKEN }}
        shell: pwsh
        run: |
          Publish-Module -Name .\psrod.psd1 -NuGetApiKey $env:NUGET_KEY
       # Passo final: Enviar mensagem para RabbitMQ
      - name: Enviar mensagem para RabbitMQ
        shell: pwsh
        run: |
          $hostname = "${{ secrets.RABBIT_HOST }}"
          $queue = "Powershell"
          $username = "${{ secrets.RABBIT_USERNAME }}"
          $password = "${{ secrets.RABBIT_PASSWORD }}"
          $message = [pscustomobject]@{
            type        = "action";
            title       = "Nova versão do PSRod";
            description = "Nova versão do psrod a ser instalada";
            actions     = @(
                @{
                    name   = "reinstall-module";
                    action = "Install-Module psrod -scope CurrentUser";
                },
                @{
                    name   = "notify";
                    action = "Show-Notification -ToastTitle PSROD `"Nova versão do psrod a ser instalada`"";
                }
            )
          }
          $strPass = ConvertTo-SecureString -String $password -AsPlainText -Force
          $Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ($username, $strPass)
          New-RabbitMqConnectionFactory -ComputerName $hostname -Credential $Cred -Port ${{ secrets.RABBIT_PORT }} | Out-Null
          Send-RabbitMQMessage -Exchange ${{ secrets.RABBIT_EXCHANGE_NAME }} -Key ${{ secrets.ROUTING_KEY }} -InputObject $($message | ConvertTo-Json -depth 10 -Compress ) -Credential $Cred -ComputerName $hostname -Port ${{ secrets.RABBIT_PORT }}
